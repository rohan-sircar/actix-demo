# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md

on: [push, pull_request]

name: Continuous Integration

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Run Cargo Check
        run: cargo check

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Run Unit Tests
        run: cargo test --lib
      - name: Run Integration Tests
        run: cargo test --test integration

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Run Cargo fmt
        run: cargo fmt --all -- --check
      - name: Run Cargo clippy
        run: cargo clippy -- -D warnings

  build-aarch64:
    name: Build ARM64 Binaries
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    needs: [check, test, lints]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-unknown-linux-gnu
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Compile
        run: cargo build --release --target=aarch64-unknown-linux-gnu

  build-ppc:
    name: Build PowerPC Binaries
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-18.04
    needs: [check, test, lints]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: powerpc64-unknown-linux-gnu
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Install PowerPC gcc
        run: |
          sudo apt-get install -y gcc-powerpc64-linux-gnu
          sudo ln -s /usr/bin/powerpc64-linux-gnu-gcc-7 /usr/bin/powerpc-linux-gnu-gcc
      - name: Compile
        run: cargo build --release --target=powerpc64-unknown-linux-gnu
        env:
          RUSTFLAGS: "-C linker=powerpc64-linux-gnu-gcc-7"

  publish-docker:
    name: Build and Publish Docker Image
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    needs: [check, test, lints]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.2.0
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: rohansircar
          password: ${{ secrets.DOCKER_LOGIN_PASSWORD }}
      - name: Compile
        run: cargo build --release
      - name: Build Image
        run: docker build -f ci.Dockerfile -t rohansircar/actix-demo:latest .
        env:
          DOCKER_BUILDKIT: 1
      - name: Publish Image
        run: docker push rohansircar/actix-demo:latest
